const base64 = @import("std").base64;

export fn decode_base_64(
    dest_ptr: [*]u8,
    dest_len: usize,
    source_ptr: [*]const u8,
    source_len: usize,
) usize {
    const src = source_ptr[0..source_len];
    const dest = dest_ptr[0..dest_len];
    const base64_decoder = base64.standard.Decoder;
    const decoded_size = base64_decoder.calcSizeForSlice(src) catch unreachable;
    base64_decoder.decode(dest[0..decoded_size], src) catch unreachable;
    return decoded_size;
}

// ----------------- in "test.c" file -----------------
// #include "base64.h"  // This header is generated by zig from base64.zig

// #include <string.h>
// #include <stdio.h>

// int main(int argc, char **argv) {
//     const char *encoded = "YWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz";
//     char buf[200];

//     size_t len = decode_base_64(buf, 200, encoded, strlen(encoded));
//     buf[len] = 0;
//     puts(buf);

//     return 0;
// }

// ----------------- in "build_object.zig" file -----------------
const std = @import("std");

pub fn build(b: *std.Build) void {
    const obj = b.addObject(.{
        .name = "base64",
        .root_source_file = b.path("base64.zig"),
    });

    const exe = b.addExecutable(.{
        .name = "test",
    });
    exe.addCSourceFile(.{ .file = b.path("test.c"), .flags = &.{"-std=c99"} });
    exe.addObject(obj);
    exe.linkSystemLibrary("c");
    b.installArtifact(exe);
}

// Running:
//      $ zig build
//      $ ./zig-out/bin/test
//      all your base are belong to us
